// Generated by CoffeeScript 1.3.3
(function() {

  require(['module', './keyframes'], function(module, KeyFrames) {
    var addCSSFile, addRule, appendCSSID, cssObjects, parseToJSObject, styleSheets, writeCSS;
    appendCSSID = "appendCSS";
    styleSheets = document.styleSheets;
    cssObjects = {};
    addRule = function(cssRules) {
      var cssObj, cssRule, idx, keyText, objText, setStyle, st, style, _i, _len;
      cssObj = {};
      for (idx in cssRules) {
        if (+idx >= 0) {
          cssRule = cssRules[idx];
          keyText = cssRule.keyText;
          style = cssRule.style;
          setStyle = {};
          for (_i = 0, _len = style.length; _i < _len; _i++) {
            st = style[_i];
            setStyle[st] = style[st];
          }
          cssObj[keyText] = setStyle;
        }
      }
      cssObjects[cssRules.name] = cssObj;
      objText = JSON.stringify(cssObjects);
      objText = 'var keyFrames = \n' + objText;
      objText += ";\nvar setKeyFrames = function($el, frames, duration) {\n    var animate;\n    animate = function() {\n        var spendTime;\n        spendTime = 0;\n        $el.stop(true);\n        $.each(frames, function(idx, val) {\n            var stepDuration, stepPercentage;\n            stepPercentage = idx.replace('%', '') / 100;\n            stepDuration = duration * stepPercentage - spendTime;\n            $el.animate(val, stepDuration);\n            return spendTime += stepDuration;\n        });\n        return setTimeout(animate, duration);\n    };\n    return animate();\n};\n$(document).ready(function(){\n    setKeyFrames($('.keyframes-fallback'), keyFrames.move, 2000);\n});\n    ";
      $('#js').text(objText);
      console.log(KeyFrames);
      return console.log(JSON.stringify(KeyFrames));
    };
    writeCSS = function(styleSheets) {
      var cssRules, text, _i, _len, _ref;
      text = [];
      _ref = styleSheets.cssRules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cssRules = _ref[_i];
        text.push(cssRules.cssText);
      }
      return $('#css').text(text.join('\n'));
    };
    addCSSFile = function() {
      var blob, cssLink, cssText, link, _dfr;
      _dfr = $.Deferred();
      window.URL = window.URL || window.webkitURL;
      cssText = $('#css').val();
      blob = new Blob([cssText], {
        type: "text/css"
      });
      $("#" + appendCSSID).remove();
      link = document.createElement("link");
      link.rel = "stylesheet";
      link.id = appendCSSID;
      link.onload = function() {
        return _dfr.resolve();
      };
      link.href = window.URL.createObjectURL(blob);
      document.body.appendChild(link);
      cssLink = window.URL.createObjectURL(blob);
      return _dfr;
    };
    parseToJSObject = function() {
      var CSSSTyleSheet, cssRules, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = styleSheets.length; _i < _len; _i++) {
        CSSSTyleSheet = styleSheets[_i];
        if (CSSSTyleSheet.ownerNode && CSSSTyleSheet.ownerNode.id === appendCSSID) {
          writeCSS(CSSSTyleSheet);
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = CSSSTyleSheet.cssRules;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              cssRules = _ref[_j];
              if (cssRules.type === 7) {
                _results1.push(addRule(cssRules));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    $('#go').click(function() {
      return addCSSFile().done(function() {
        return parseToJSObject();
      });
    });
    return parseToJSObject();
  });

}).call(this);
